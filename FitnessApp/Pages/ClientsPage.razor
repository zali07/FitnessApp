@page "/clients"

<PageTitle>Client</PageTitle>

@using FitnessApiClient.Api
@using FitnessApiClient.Context
@using FitnessApiClient.Validator
@using Microsoft.EntityFrameworkCore
@using FitnessApiClient
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using FluentValidation
@using ClosedXML.Excel

@inject IJSRuntime JSRuntime

@if (updateSuccess) 
{
    <div class="alert alert-success fade-in" role="alert" style="margin-left:@(loaded ? " 15%" : "0")">Updated successfully!</div>
}
else if (added)
{
    <div class="alert alert-success fade-in" role="alert" style="margin-left:@(loaded ? " 15%" : "0")">Added successfully!</div>
}
@if (failed)
{
    <div class="alert alert-danger fade-in" role="alert" style="margin-left:@(loaded ? " 15%" : "0")">Update failed!</div>
}
@if (loaded)
{
    <div class="alert alert-success fade-in" role="alert">Loaded successfully!</div>
}
@if (refresh_clicked)
{
    <div class="alert alert-info fade-in" role="alert" style="right: 10px">Loading...</div>
}

<h1>- Clients -</h1>
<EditForm Model="@newClient" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
            
    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText class="form-control" id="Name" @bind-Value="newClient.Name" placeholder="Client name" />
    </div>
    <div class="form-group">
        <label for="Phone">Phone:</label>
        <InputText class="form-control" id="Phone" @bind-Value="newClient.Phone" placeholder="+40 123456789"/>
    </div>
    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText class="form-control" id="Email" @bind-Value="newClient.Email" placeholder="example@domain.tld"/>
    </div>
    <div class="form-group">
        <label for="CNP">CNP:</label>
        <InputText class="form-control" id="CNP" @bind-Value="newClient.CNP" placeholder = "5981458173264"/>
    </div>
    <div class="form-group">
        <label for="Address">Address:</label>
        <InputText class="form-control" id="Address" @bind-Value="newClient.Address" />
    </div>
    <div class="form-group">
        <label for="Barcode">Barcode:</label>
        <InputText class="form-control" id="Barcode" @bind-Value="newClient.Barcode" />
    </div>
    <div class="form-group">
        <label for="Notes">Notes:</label>
        <InputTextArea class="form-control" id="Notes" @bind-Value="newClient.Notes" />
    </div>
    @if (myValidator.Validate(newClient).IsValid)
    {
        <button class="btn btn-primary submit">@(
                itemSelected ? "Update" : "Submit"
        )</button>
    }
    else
    {
        <button class="btn btn-primary submit" disabled>Submit</button>
    }
    @if (itemSelected)
    {
        <button class="btn btn-danger submit" @onclick="async () => await HandleDelete()">Delete</button>
    }
</EditForm>
<button class="refresh-table" @onclick="async () => await LoadClientsAsync()">Refresh</button>
<button class="btn btn-primary export" @onclick="ExportToExcel">Export Clients</button>
<table class="clients_table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Phone</th>
            <th>Email</th>
            <th>IsDeleted</th>
            @*<th>Photo</th>*@
            <th>InsertedDate</th>
            <th>CNP</th>
            <th>Address</th>
            <th>Barcode</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var client in clients)
        {
            <tr @onclick="(() => HandleItemSelected(client.ClientId))"
                class="ticket-type-row @((itemSelected && selectedItemId == client.ClientId ? "selected" : ""))">
                <td>@client.Name</td>
                <td>@client.Phone</td>
                <td>@client.Email</td>
                <td>@client.IsDeleted</td>
                @*<td>@client.Photo</td>*@
                <td>@client.InsertedDate</td>
                <td>@client.CNP</td>
                <td>@client.Address</td>
                <td>@client.Barcode</td>
                <td>@client.Notes</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private async Task ExportToExcel()
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Clients");

            worksheet.Cell(1, 1).Value = "Name";
            worksheet.Cell(1, 2).Value = "Phone";
            worksheet.Cell(1, 3).Value = "Email";
            worksheet.Cell(1, 4).Value = "IsDeleted";
            worksheet.Cell(1, 5).Value = "InsertedDate";
            worksheet.Cell(1, 6).Value = "CNP";
            worksheet.Cell(1, 7).Value = "Address";
            worksheet.Cell(1, 8).Value = "Barcode";
            worksheet.Cell(1, 9).Value = "Notes";

            for (int i = 0; i < clients.Count; i++)
            {
                worksheet.Cell(i + 2, 1).Value = clients[i].Name;
                worksheet.Cell(i + 2, 2).Value = clients[i].Phone;
                worksheet.Cell(i + 2, 3).Value = clients[i].Email;
                worksheet.Cell(i + 2, 4).Value = clients[i].IsDeleted;
                worksheet.Cell(i + 2, 5).Value = clients[i].InsertedDate;
                worksheet.Cell(i + 2, 6).Value = clients[i].CNP;
                worksheet.Cell(i + 2, 7).Value = clients[i].Address;
                worksheet.Cell(i + 2, 8).Value = clients[i].Barcode;
                worksheet.Cell(i + 2, 9).Value = clients[i].Notes;
            }

            worksheet.Columns().AdjustToContents();
            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                stream.Seek(0, SeekOrigin.Begin);
                var fileName = "clients.xlsx";
                var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, Convert.ToBase64String(stream.ToArray()));
            }
        }
    }

    private InputValidator<Clients> myValidator = new InputValidator<Clients>();
    private readonly AdminDbClient adminDbClient = new AdminDbClient(new MyDbContext());

    private List<Clients> clients = new List<Clients>();

    private Clients newClient = new Clients();

    private bool itemSelected = false;
    private int selectedItemId = -1;
    private bool updateSuccess = false;
    private bool failed = false;
    private bool loaded = false;
    private bool refresh_clicked = false;
    private bool added = false;

    private int addReturnValue = 0;
    private int updateReturnValue = 0;
    private int deleteReturnValue = 0;

    private void HandleItemSelected(int clientId)
    {
        updateSuccess = false;
        failed = false;
        itemSelected = true;
        selectedItemId = clientId;
        newClient = clients.First(client => client.ClientId == clientId);

        if (newClient == null)
        {
            newClient = new Clients();
        }
    }

    private async Task HandleValidSubmit()
    {
        updateSuccess = false;
        failed = false;
        using (var adminDbClient = new AdminDbClient(new MyDbContext()))
        {
            if (!itemSelected)
            {
                addReturnValue = await adminDbClient.AddEntity<Clients>(newClient);

                if (addReturnValue == 1)
                {
                    added = true;
                }
                else
                {
                    failed = true;
                }
            }
            else
            {
                if (selectedItemId == -1)
                {
                    throw new ArgumentNullException();
                }
                updateReturnValue = await adminDbClient.UpdateEntity<Clients>(selectedItemId, newClient);

                if (updateReturnValue == 1)
                {
                    updateSuccess = true;
                }
                else
                {
                    failed = true;
                }
            }
        }
        await LoadClientsAsync();
        itemSelected = false;
        newClient = new Clients();
    }

    private async Task ClosePopup(int type)
    {
        StateHasChanged();
        switch (type)
        {
            case 1:
                await Task.Delay(2000);
                updateSuccess = false;
                loaded = false;
                return;
            case 2:
                await Task.Delay(2000);
                added = false;
                loaded = false;
                return;
            case 3:
                await Task.Delay(2000);
                failed = false;
                loaded = false;
                return;
            case 4:
                await Task.Delay(2000);
                updateSuccess = false;
                added = false;
                loaded = false;
                return;
            default:
                return;
        }
    }

    private async Task HandleDelete()
    {
        updateSuccess = false;
        failed = false;
        using (var adminDbClient = new AdminDbClient(new MyDbContext()))
        {
            deleteReturnValue = await adminDbClient.DeleteEntity<TicketTypes>(selectedItemId);      
        }

        await LoadClientsAsync();
        itemSelected = false;
        newClient = new Clients();
        await ClosePopup(1);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        refresh_clicked = true;
        using (var adminDbClient = new AdminDbClient(new MyDbContext()))
        {
            int act_length = clients.Count();
            bool empty = false;
            if (act_length == 0)
            {
                empty = true;
            }
            clients = await adminDbClient.GetTable<Clients>();
            if (!empty || clients.Count() > act_length)
        {
                loaded = true;
                refresh_clicked = false;
                await ClosePopup(4);
            }
        }
    }
}