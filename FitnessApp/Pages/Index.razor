@page "/"
@using System.Security.Claims;
@using FitnessApiClient;
@using Microsoft.AspNetCore.Authentication;

@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Login</h1>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" class="form-control" id="username" @bind-value="Username" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" class="form-control" id="password" @bind-value="Password" />
    </div>
    @*<button type="submit" class="btn btn-primary">Login</button>*@
</form>

@code {
    private string Username = "admin";
    private string Password = "password";
    private string ErrorMessage;

    private async Task HandleSubmit()
    {
        var result = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var identity = result.User.Identity as ClaimsIdentity;
        if (identity != null)
        {
            identity.AddClaim(new Claim(ClaimTypes.Name, Username));
            var userRoles = new List<string> { "user" };
            if (Username == "admin" && Password == "password")
            {
                userRoles.Add("admin");
            }
            identity.AddClaims(userRoles.Select(r => new Claim(ClaimTypes.Role, r)));
            var authProperties = new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(20)
                };
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).SignInAsync(Username, Password);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid login attempt";
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}