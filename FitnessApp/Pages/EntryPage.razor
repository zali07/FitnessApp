@page "/entry"

<PageTitle>Entry</PageTitle>

@using FitnessApiClient.Api
@using FitnessApiClient.Context
@using FitnessApiClient

<AuthorizeView>
    <Authorized>
        <h1>Entry Page</h1>
        <h3>Enter Ticket Barcode</h3>

        @if (Message != null)
        {
            if (Message == "Success" || Message == "Access granted")
            {
                <div class="alert alert-success">@Message</div>
            }
            else
            {
                <div class="alert alert-danger">@Message</div>
            }
        }

        <input type="text" @bind="ticketNumber" />

        <button @onclick="ValidateTicketBarcodeAsync">Submit</button>

        @if (dataLoaded)
        {
            <div>
                <h2>Ticket Details</h2>
                <p>Valid: @ticket.Valid</p>
                <p>Name: @client.Name</p>
                <p>Valid Until: @(ticket.IssueDate.AddDays(ticketType.ValidityDays).Date)</p>
                <p>Entries Remained: @ticket.NumOfEntries</p>
            </div>
            @if (ticket.Valid || ticket.NumOfEntries <= 0 || (ticket.IssueDate.AddDays(ticketType.ValidityDays) >= DateTime.Now))
            {
                <button @onclick="ValidateEntry">Submit</button>
            }
        }

        @if (isLoading)
        {
            <div>Loading...</div>
        }       
    </Authorized>
    <NotAuthorized>
        <h2>Please log in to get permission for this page.</h2>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string ticketNumber = "";
    private ClientTickets ticket = new ClientTickets();
    private Clients client = new Clients();
    private TicketTypes ticketType = new TicketTypes();
    private Entries entry = new Entries();
    private string? Message;
    private bool isLoading = false;
    bool dataLoaded = false;

    private async Task ValidateEntry()
    {
        Message = null;
        using(var adminDbClient = new AdminDbClient(new MyDbContext()))
        {
            entry = new Entries
            {
                ClientId = client.ClientId,
                TicketTypeId = ticket.TicketTypeId,
                Date = DateTime.Now,
                InsertedByUid = 1,
                Barcode = ticket.Barcode,
                ArenaId = ticket.ArenaId
            };
            isLoading = true;
            await adminDbClient.AddEntity<Entries>(entry);
            if(ticket.NumOfEntries > 0)
            {
                --ticket.NumOfEntries;
                await adminDbClient.UpdateEntity<ClientTickets>(ticket.ClientTicketsId, ticket);
            }
            isLoading = false;
            Message = "Access granted";
        }
    }

    private async Task ValidateTicketBarcodeAsync()
    {
        dataLoaded = false;
        Message = null;
        using(var adminDbClient = new AdminDbClient(new MyDbContext()))
        {
            isLoading = true;
            ticket = await adminDbClient.GetByBarcode<ClientTickets>(ticketNumber);
            if(ticket == null)
            {
                Message = "Invalid barcode";
                isLoading = false;
                return;
            }
            Message = "Success";
            client = await adminDbClient.GetClientByClientId(ticket.ClientId);
            ticketType = await adminDbClient.GetTicketTypeByTicketTypeId(ticket.TicketTypeId);
            isLoading = false;
            dataLoaded = true;
        }
    }

}
